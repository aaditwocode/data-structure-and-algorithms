class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        vector<vector<string>> result;
        if (dict.find(endWord) == dict.end()) return result;

        unordered_map<string, vector<string>> parent;
        unordered_set<string> currentLevel, nextLevel;
        queue<string> q;

        q.push(beginWord);
        currentLevel.insert(beginWord);

        bool found = false;

        while (!q.empty() && !found) {
            int size = q.size();
            unordered_set<string> visitedThisLevel;

            for (int i = 0; i < size; ++i) {
                string word = q.front(); q.pop();

                string original = word;

                for (int j = 0; j < word.size(); ++j) {
                    char ch = word[j];
                    for (char c = 'a'; c <= 'z'; ++c) {
                        word[j] = c;
                        if (dict.find(word) != dict.end()) {
                            if (currentLevel.find(word) == currentLevel.end()) {
                                if (!visitedThisLevel.count(word)) {
                                    q.push(word);
                                    visitedThisLevel.insert(word);
                                }
                                parent[word].push_back(original);
                            }
                            if (word == endWord) found = true;
                        }
                    }
                    word[j] = ch;
                }
            }

            for (const auto& w : visitedThisLevel) dict.erase(w);
            currentLevel.insert(visitedThisLevel.begin(), visitedThisLevel.end());
        }

        if (!found) return result;

        vector<string> path = { endWord };
        backtrack(endWord, beginWord, parent, path, result);
        return result;
    }

    void backtrack(string word, string& beginWord, unordered_map<string, vector<string>>& parent,
                   vector<string>& path, vector<vector<string>>& result) {
        if (word == beginWord) {
            vector<string> temp = path;
            reverse(temp.begin(), temp.end());
            result.push_back(temp);
            return;
        }

        for (const string& par : parent[word]) {
            path.push_back(par);
            backtrack(par, beginWord, parent, path, result);
            path.pop_back();
        }
    }
};
