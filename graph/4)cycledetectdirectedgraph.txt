class Solution {
  public:

    bool cycle(unordered_map<int, vector<int>> &adj, int u, vector<bool> &visited, vector<bool> &inrecursion) {
        visited[u] = true;
        inrecursion[u] = true;

        for (int v : adj[u]) {
            if (!visited[v]) {
                if (cycle(adj, v, visited, inrecursion)) return true;
            } else if (inrecursion[v]) {
                return true;
            }
        }

        inrecursion[u] = false;
        return false;
    }

    bool isCyclic(int V, vector<vector<int>> &edges) {
        unordered_map<int, vector<int>> adj;
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);  
        }

        vector<bool> visited(V, false);
        vector<bool> inrecursion(V, false);

        for (int u = 0; u < V; u++) {
            if (!visited[u]) {
                if (cycle(adj, u, visited, inrecursion)) return true;
            }
        }

        return false;
    }
};

//////////////////////////////////BFS////////////////////////////////////////

#include <vector>
#include <unordered_map>
#include <queue>
#include <string>
using namespace std;

class Solution {
  public:
    bool bfs(unordered_map<int, vector<int>> &adj, vector<int> &indegree, int V) {
        queue<int> q;
        int count = 0;

        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) q.push(i);
        }

        while (!q.empty()) {
            int u = q.front();
            q.pop();
            count++;

            for (int v : adj[u]) {
                indegree[v]--;
                if (indegree[v] == 0) q.push(v);
            }
        }

        return count != V;
    }

    string cycleDetection(int V, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;
        vector<int> indegree(V, 0);

        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            indegree[e[1]]++;
        }

        if (bfs(adj, indegree, V)) return "Yes";
        return "No";
    }
};
