#include <vector>
using namespace std;

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty() || board[0].empty()) return;

        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> vis(m, vector<bool>(n, false));  
        vector<pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};  

      
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 || i == m - 1 || j == 0 || j == n - 1) && board[i][j] == 'O') {
                    dfs(board, vis, i, j, directions, m, n);
                }
            }
        }

       
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O' && !vis[i][j]) {
                    board[i][j] = 'X';
                }
            }
        }
    }

private:
    void dfs(vector<vector<char>>& board, vector<vector<bool>>& vis, int i, int j, vector<pair<int, int>>& directions, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || vis[i][j] || board[i][j] != 'O') {
            return;
        }

        vis[i][j] = true;

        for (auto& dir : directions) {
            int x = i + dir.first;
            int y = j + dir.second;
            dfs(board, vis, x, y, directions, m, n);
        }
    }
};