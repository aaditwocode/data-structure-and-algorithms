#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    typedef tuple<int, int, int> T; 

    int spanningTree(int V, vector<vector<int>> adj[]) {
        priority_queue<T, vector<T>, greater<T>> pq;
        vector<bool> inmst(V, false);
        vector<int> parent(V, -1);

        pq.push(make_tuple(0, 0, -1));  
        int sum = 0;

        while (!pq.empty()) {
            int wt, node, par;
            tie(wt, node, par) = pq.top();
            pq.pop();

            if (inmst[node]) continue;

            inmst[node] = true;
            parent[node] = par;
            sum += wt;

            for (auto &edge : adj[node]) {
                int adjNode = edge[0];
                int weight = edge[1];

                if (!inmst[adjNode]) {
                    pq.push(make_tuple(weight, adjNode, node));
                }
            }
        }

        return sum;
    }
};
