class Solution {
  public:
    void dfs(int u, int parent, vector<int> adj[], vector<int> &disc, vector<int> &low, unordered_map<int, bool> &vis, vector<bool> &ap, int &timer) {
        vis[u] = true;
        disc[u] = low[u] = timer++;
        int children = 0;

        for (int v : adj[u]) {
            if (v == parent) continue;

            if (!vis[v]) {
                dfs(v, u, adj, disc, low, vis, ap, timer);
                low[u] = min(low[u], low[v]);
                if (parent != -1 && low[v] >= disc[u]) ap[u] = true;
                children++;
            } else {
                low[u] = min(low[u], disc[v]);
            }
        }

        if (parent == -1 && children > 1) ap[u] = true;
    }

    vector<int> articulationPoints(int V, vector<vector<int>> &edges) {
        vector<int> adj[V];
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        vector<int> disc(V, -1), low(V, -1);
        unordered_map<int, bool> vis;
        vector<bool> ap(V, false);
        int timer = 0;

        for (int i = 0; i < V; i++) {
            if (!vis[i]) dfs(i, -1, adj, disc, low, vis, ap, timer);
        }

        vector<int> result;
        for (int i = 0; i < V; i++) {
            if (ap[i]) result.push_back(i);
        }

        if (result.empty()) return {-1};
        return result;
    }
};
