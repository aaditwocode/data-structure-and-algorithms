#include <iostream>
#include <vector>
using namespace std;

int find(int x, vector<int> &parent) {
    if (x == parent[x]) return x;
    return parent[x] = find(parent[x], parent);
}

void unionSet(int x, int y, vector<int> &parent) {
    int x_parent = find(x, parent);
    int y_parent = find(y, parent);
    if (x_parent != y_parent) {
        parent[x_parent] = y_parent;
    }
}

int main() {
    int n = 6; 
    vector<int> parent(n);
    for (int i = 0; i < n; i++) parent[i] = i;

    unionSet(0, 1, parent);
    unionSet(2, 3, parent);
    unionSet(1, 3, parent);
    unionSet(4, 5, parent);

    for (int i = 0; i < n; i++) {
        cout << "Representative of " << i << " is " << find(i, parent) << endl;
    }

    return 0;
}
