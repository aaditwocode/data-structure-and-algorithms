class Solution {
public:
    typedef tuple<long long, int, int, int> T;

    long long minCost(int m, int n, vector<vector<int>>& waitCost) {
        vector<vector<vector<long long>>> dist(m, vector<vector<long long>>(n, vector<long long>(2, LLONG_MAX)));
        priority_queue<T, vector<T>, greater<T>> pq;

        long long startCost = 1;
        dist[0][0][1] = startCost;
        pq.push({startCost, 1, 0, 0});

        vector<pair<int, int>> directions = {{1, 0}, {0, 1}};

        while (!pq.empty()) {
            auto [cost, time, x, y] = pq.top();
            pq.pop();

            if (x == m - 1 && y == n - 1) return cost;

            int t = time % 2;
            if (dist[x][y][t] < cost) continue;

            if (time % 2 == 1) {
                for (auto& dir : directions) {
                    int nx = x + dir.first;
                    int ny = y + dir.second;
                    if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                        long long entryCost = 1LL * (nx + 1) * (ny + 1);
                        long long newCost = cost + entryCost;
                        int nextTime = time + 1;
                        int nextT = nextTime % 2;
                        if (newCost < dist[nx][ny][nextT]) {
                            dist[nx][ny][nextT] = newCost;
                            pq.push({newCost, nextTime, nx, ny});
                        }
                    }
                }
            } else {
                long long wait = waitCost[x][y];
                long long newCost = cost + wait;
                int nextTime = time + 1;
                int nextT = nextTime % 2;
                if (newCost < dist[x][y][nextT]) {
                    dist[x][y][nextT] = newCost;
                    pq.push({newCost, nextTime, x, y});
                }
            }
        }

        return -1;
    }
};