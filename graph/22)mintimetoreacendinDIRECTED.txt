class Solution {
public:
    int minTime(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<tuple<int, int, int>>> adj;
        for (auto& edge : edges) {
            int a = edge[0], b = edge[1], s = edge[2], e = edge[3];
            adj[a].push_back({b, s, e});
        }

        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> result(n, INT_MAX);
        pq.push({0, 0});
        result[0] = 0;

        while (!pq.empty()) {
            int currentTime = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            if (currentTime > result[node]) continue;

            for (auto& it : adj[node]) {
                int nextNode, start, end;
                tie(nextNode, start, end) = it;

                int waitTime = 0;
                if (currentTime < start) {
                    waitTime = start - currentTime;
                } else if (currentTime > end) {
                    continue; 
                }

                int arrivalTime = currentTime + waitTime + 1;

                if (arrivalTime < result[nextNode]) {
                    result[nextNode] = arrivalTime;
                    pq.push({arrivalTime, nextNode});
                }
            }
        }

        return (result[n - 1] == INT_MAX) ? -1 : result[n - 1];
    }
};
