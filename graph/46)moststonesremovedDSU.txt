class Solution {
public:
    vector<int> parent;
    vector<int> rankdsu;

    int find(int x) {
        if (x == parent[x]) return x;
        return parent[x] = find(parent[x]);
    }

    void unionSet(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);
        if (x_parent == y_parent) return;

        if (rankdsu[x_parent] < rankdsu[y_parent]) {
            parent[x_parent] = y_parent;
        } else if (rankdsu[x_parent] > rankdsu[y_parent]) {
            parent[y_parent] = x_parent;
        } else {
            parent[y_parent] = x_parent;
            rankdsu[x_parent]++;
        }
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        parent.resize(n);
        rankdsu.resize(n, 0);
        for (int i = 0; i < n; i++) parent[i] = i;

        int groups = n;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x1 = stones[i][0], y1 = stones[i][1];
                int x2 = stones[j][0], y2 = stones[j][1];

                if (x1 == x2 || y1 == y2) {
                    if (find(i) != find(j)) {
                        unionSet(i, j);
                        groups--;
                    }
                }
            }
        }

        return n - groups;
    }
};
