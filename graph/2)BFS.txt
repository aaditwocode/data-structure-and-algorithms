#include <vector>
#include <unordered_map>
#include <queue>
using namespace std;

class Solution {
public:
    void bfsHelper(unordered_map<int, vector<int>>& adjlist, int u, vector<bool>& visited, vector<int>& result) {
        queue<int> q;  
        q.push(u);
        visited[u] = true;  

        while (!q.empty()) {
            int u = q.front();
            q.pop();
            result.push_back(u);  

            for (int v : adjlist[u]) {
                if (!visited[v]) {
                    visited[v] = true; 
                    q.push(v);
                }
            }
        }
    }

    vector<int> bfs(vector<vector<int>> &adj) {
        int V = adj.size();
        unordered_map<int, vector<int>> adjlist;

        for (int u = 0; u < V; ++u) {
            for (int v : adj[u]) {
                adjlist[u].push_back(v);
            }
        }
        
        vector<bool> visited(V, false);
        vector<int> result;
        if (V > 0) {  
            bfsHelper(adjlist, 0, visited, result);
        }
        return result;
    }
};