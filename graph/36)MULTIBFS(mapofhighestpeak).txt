class Solution {
public:
    typedef pair<int, int> P;
    vector<vector<int>> directions{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = isWater.size();
        int n = isWater[0].size();

        vector<vector<int>> height(m, vector<int>(n, -1));
        queue<P> q;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isWater[i][j] == 1) {
                    height[i][j] = 0;
                    q.push({i, j});
                }
            }
        }

        auto is_safe = [&](int x, int y) {
            return x >= 0 && x < m && y >= 0 && y < n && height[x][y] == -1;
        };

        while (!q.empty()) {
            P cur = q.front();
            q.pop();

            int i = cur.first;
            int j = cur.second;

            for (auto &dir : directions) {
                int new_i = i + dir[0];
                int new_j = j + dir[1];

                if (is_safe(new_i, new_j)) {
                    height[new_i][new_j] = height[i][j] + 1;
                    q.push({new_i, new_j});
                }
            }
        }

        return height;
    }
};
