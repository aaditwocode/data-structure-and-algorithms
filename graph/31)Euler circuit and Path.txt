class Solution {
public:
    void DFS(vector<int> adj[], int u, vector<bool>& visited) {
        visited[u] = true;
        for (int v : adj[u]) {
            if (!visited[v]) {
                DFS(adj, v, visited);
            }
        }
    }

    bool isConnected(int V, vector<int> adj[]) {
        vector<bool> visited(V, false);
        int nonZeroDegreeVertex = -1;

        for (int i = 0; i < V; i++) {
            if (!adj[i].empty()) {
                nonZeroDegreeVertex = i;
                break;
            }
        }

        if (nonZeroDegreeVertex == -1)
            return true;

        DFS(adj, nonZeroDegreeVertex, visited);

        for (int i = 0; i < V; i++) {
            if (!visited[i] && !adj[i].empty())
                return false;
        }

        return true;
    }

    int isEulerCircuit(int V, vector<int> adj[]) {
        if (!isConnected(V, adj))
            return 0;

        int oddCount = 0;
        for (int i = 0; i < V; i++) {
            if (adj[i].size() % 2 != 0)
                oddCount++;
        }

        if (oddCount > 2) return 0;
        if (oddCount == 2) return 1;
        return 2;
    }
};
