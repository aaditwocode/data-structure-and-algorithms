
class Solution {
  public:
    int timer = 0;
    bool bridgeFound = false;

    void dfs(int u, int parent, vector<int> adj[], vector<int> &disc, vector<int> &low, unordered_map<int, bool> &vis, int c, int d) {
        vis[u] = true;
        disc[u] = low[u] = timer++;
        
        for (int v : adj[u]) {
            if (v == parent) continue;

            if (!vis[v]) {
                dfs(v, u, adj, disc, low, vis, c, d);
                low[u] = min(low[u], low[v]);
                if (low[v] > disc[u]) {
                    if ((u == c && v == d) || (u == d && v == c)) bridgeFound = true;
                }
            } else {
                low[u] = min(low[u], disc[v]);
            }
        }
    }

    bool isBridge(int V, vector<vector<int>> &edges, int c, int d) {
        vector<int> adj[V];
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        vector<int> disc(V, -1), low(V, -1);
        unordered_map<int, bool> vis;

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, -1, adj, disc, low, vis, c, d);
            }
        }

        return bridgeFound;
    }
};
