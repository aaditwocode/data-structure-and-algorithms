class Solution {
public:
    void dfs(int node, vector<int>& vis, stack<int>& st, const vector<vector<int>>& adj) {
        vis[node] = 1;
        for (int neighbor : adj[node]) {
            if (!vis[neighbor]) {
                dfs(neighbor, vis, st, adj);
            }
        }
        st.push(node);
    }

    vector<int> topologicalSort(const vector<vector<int>>& adj) {
        int V = adj.size();
        vector<int> vis(V, 0);
        stack<int> st;

        for (int i = 0; i < V; ++i) {
            if (!vis[i]) {
                dfs(i, vis, st, adj);
            }
        }

        vector<int> ans;
        while (!st.empty()) {
            ans.push_back(st.top());
            st.pop();
        }

        return ans;
    }
};