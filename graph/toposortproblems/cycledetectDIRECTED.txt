#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool hasCycle(vector<vector<int>>& graph, int numVertices) {
    vector<int> inDegree(numVertices, 0);
    for (int u = 0; u < numVertices; u++) {
        for (int v : graph[u]) {
            inDegree[v]++;
        }
    }

    queue<int> q;
    for (int v = 0; v < numVertices; v++) {
        if (inDegree[v] == 0) {
            q.push(v);
        }
    }

    int count = 0;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        count++;

        for (int v : graph[u]) {
            inDegree[v]--;
            if (inDegree[v] == 0) {
                q.push(v);
            }
        }
    }

    if (count != numVertices) {
        return true;
    } else {
        return false;
    }
}

int main() {
    int numVertices = 3;
    vector<vector<int>> graph = {
        {1},
        {2},
        {0}
    };

    if (hasCycle(graph, numVertices)) {
        cout << "Cycle detected!" << endl;
    } else {
        cout << "No cycle detected." << endl;
    }

    return 0;
}