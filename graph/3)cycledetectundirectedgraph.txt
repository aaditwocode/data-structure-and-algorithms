#include <vector>
#include <unordered_map>
using namespace std;

bool dfscycle(unordered_map<int, vector<int>> &adj, int u, vector<int> &visited, int parent) {
    if (visited[u]) return true;
    visited[u] = 1;

    for (int &v : adj[u]) {
        if (v == parent) continue;
        if (visited[v]) return true;
        if (dfscycle(adj, v, visited, u)) return true;
    }

    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    unordered_map<int, vector<int>> adj;

    for (auto &e : edges) {
        adj[e[0]].push_back(e[1]);
        adj[e[1]].push_back(e[0]); 
    }

    vector<int> visited(n + 1, 0); 

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (dfscycle(adj, i, visited, -1)) return "Yes";
        }
    }

    return "No";
}



//////////////BFS//////////////////////////////////////

#include <vector>
#include <unordered_map>
#include <queue>
using namespace std;

bool bfscycle(unordered_map<int, vector<int>> &adj, int start, vector<int> &visited) {
    queue<pair<int, int>> q;
    q.push({start, -1});
    visited[start] = 1;

    while (!q.empty()) {
        int u = q.front().first;
        int parent = q.front().second;
        q.pop();

        for (int v : adj[u]) {
            if (!visited[v]) {
                visited[v] = 1;
                q.push({v, u});
            } else if (v != parent) {
                return true;
            }
        }
    }

    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    unordered_map<int, vector<int>> adj;

    for (auto &e : edges) {
        adj[e[0]].push_back(e[1]);
        adj[e[1]].push_back(e[0]);
    }

    vector<int> visited(n + 1, 0); 

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (bfscycle(adj, i, visited)) return "Yes";
        }
    }

    return "No";
}
