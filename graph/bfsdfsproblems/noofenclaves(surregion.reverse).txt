class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        if (grid.empty() || grid[0].empty()) return 0;

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));  
        vector<pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};  

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 || i == m - 1 || j == 0 || j == n - 1) && grid[i][j] == 1) {
                    dfs(grid, vis, i, j, directions, m, n);
                }
            }
        }
    
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && vis[i][j] == 0) {  
                    cnt++;
                }
            }
        }

        return cnt;
    }
    
private:
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& vis, int i, int j, vector<pair<int, int>>& directions, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || vis[i][j] == 1 || grid[i][j] != 1) {
            return;
        }

        vis[i][j] = 1; 

        for (auto& dir : directions) {
            int x = i + dir.first;
            int y = j + dir.second;
            dfs(grid, vis, x, y, directions, m, n);
        }
    }
};
