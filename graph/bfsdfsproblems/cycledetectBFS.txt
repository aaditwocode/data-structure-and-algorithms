class Solution {
public:
    bool isCycle(vector<vector<int>>& adj) {
        int n = adj.size();
        vector<int> visited(n, 0);

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {  
                queue<pair<int, int>> q;
                q.push({i, -1});
                visited[i] = 1;

                while (!q.empty()) {
                    int node = q.front().first;
                    int parent = q.front().second;
                    q.pop();

                    for (int neighbor : adj[node]) {
                        if (!visited[neighbor]) {
                            visited[neighbor] = 1;
                            q.push({neighbor, node});
                        } else if (neighbor != parent) {  
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
};