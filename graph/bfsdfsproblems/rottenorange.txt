class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if (grid.empty() || grid[0].empty()) return 0;

        int m = grid.size(), n = grid[0].size(), fresh = 0, minutes = 0;
        queue<pair<pair<int, int>, int>> q;
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) q.push({{i, j}, 0});
                else if (grid[i][j] == 1) fresh++;
            }
        }

        while (!q.empty()) {
            auto [current, t] = q.front();
            q.pop();

            for (auto& dir : directions) {
                int x = current.first + dir.first;
                int y = current.second + dir.second;
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                    grid[x][y] = 2;
                    q.push({{x, y}, t + 1});
                    fresh--;
                    minutes = t + 1;
                }
            }
        }

        return fresh == 0 ? minutes : -1;
    }
};
