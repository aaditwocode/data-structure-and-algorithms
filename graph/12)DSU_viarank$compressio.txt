#include <iostream>
#include <vector>
using namespace std;


int find(int x, vector<int> &parent) {
    if (x == parent[x]) return x;
    return parent[x] = find(parent[x], parent);
}

void unionSet(int x, int y, vector<int> &parent,vector<int> rankdsu;) {
    int x_parent = find(x);
    int y_parent = find(y);

    if (x_parent == y_parent) return;

    if (rankdsu[x_parent] < rankdsu[y_parent]) {
        parent[x_parent] = y_parent;
    } else if (rankdsu[x_parent] > rankdsu[y_parent]) {
        parent[y_parent] = x_parent;
    } else {
        parent[y_parent] = x_parent;
        rankdsu[x_parent]++;
    }
}

int main() {
    int n = 6;
    parent.resize(n);
    rankdsu.resize(n, 0);

    for (int i = 0; i < n; i++) parent[i] = i;

    unionSet(0, 1,parent,rankdsu);
    unionSet(2, 3);
    unionSet(1, 3);
    unionSet(4, 5);

    for (int i = 0; i < n; i++) {
        cout << "Representative of " << i << " is " << find(i,parent) << endl;
    }

    return 0;
}
