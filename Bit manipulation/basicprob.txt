#include <stdio.h>
#include <stdbool.h>

void swap(int *a, int *b) {
    *a = *a ^ *b;
    *b = *a ^ *b;
    *a = *a ^ *b;
}

bool isBitSet(int num, int i) {
    return (num & (1 << i)) != 0;
}

int setBit(int num, int i) {
    return num | (1 << i);
}

int clearBit(int num, int i) {
    return num & ~(1 << i);
}

int toggleBit(int num, int i) {
    return num ^ (1 << i);
}

int removelastsetbit(int num ){
  return num & (num-1);
}

 bool isPowerOfTwo(int n) {
        return ((n > 0) && ((n & (n - 1)) == 0));
    }

int countSetBits(int num) {
    int count = 0;
    while (num) {
        count += num & 1;
        num = num >> 1;
    }
    return count;
}


int main() {
    int x = 5, y = 9;
    printf("Before swap: x=%d, y=%d\n", x, y);
    swap(&x, &y);
    printf("After swap: x=%d, y=%d\n", x, y);

    int num = 13;
    int bit = 1;
    printf("\nNumber: %d\n", num);
    printf("Bit %d is %s\n", bit, isBitSet(num, bit) ? "set" : "not set");
    printf("After setting bit %d: %d\n", bit, setBit(num, bit));
    printf("After clearing bit %d: %d\n", bit, clearBit(num, bit));
    printf("After toggling bit %d: %d\n", bit, toggleBit(num, bit));

    return 0;
}