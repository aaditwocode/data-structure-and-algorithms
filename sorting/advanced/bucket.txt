void bucketSort(float arr[], int n) {
   
    float maxValue = *max_element(arr, arr + n);
   
    vector<vector<float>> buckets[n];

    for (int i = 0; i < n; i++) {
        int bucketIndex = n * (arr[i] / maxValue); 
        buckets[bucketIndex].push_back(arr[i]);
    }
    
  
    for (int i = 0; i < n; i++) {
        sort(buckets[i].begin(), buckets[i].end());
    }
    
    // Concatenate all buckets into arr[]
    int index = 0;
    for (int i = 0; i < n; i++) {
        for (size_t j = 0; j < buckets[i].size(); j++) {
            arr[index++] = buckets[i][j];
        }
    }
}

int main() {
    float arr[] = {0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    bucketSort(arr, n);
    
    cout << "Sorted array is: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}


 // Find the maximum value in the array
  // Create n empty buckets
     // Normalize and put array elements into different buckets
       // Sort individual buckets
        // Concatenate all buckets into arr[]