class Solution {
public:
    void f(const vector<int>& nums, int n, int k, vector<int>& result) {
        vector<vector<int>> buckets(n + 1);
        unordered_map<int, int> freq; 
       
        for (int num : nums) {
            freq[num]++;
        }

   
        for (const auto& it : freq) {
            int bucketIndex = it.second;
            buckets[bucketIndex].push_back(it.first);
        }
        for (int i = n; i >= 0 && result.size() < k; i--) {
            if (buckets[i].empty()) continue;
            for (int num : buckets[i]) {
                result.push_back(num);
                if (result.size() == k) return; 
            }
        }
    }

    vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> result;
        f(nums, n, k, result);
        return result;
    }
};