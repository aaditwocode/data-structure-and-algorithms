

class Solution {
public:
    double fractionalKnapsack(vector<int>& val, vector<int>& wt, int capacity) {

        vector<pair<double, int>> ratio;
        for (int i = 0; i < val.size(); i++) {
            ratio.push_back({(double)val[i] / wt[i], i});
        }
        sort(ratio.begin(), ratio.end(), greater<pair<double, int>>());


        double ans = 0.0;
        for (const auto& item : ratio) {
            int index = item.second;
            if (capacity >= wt[index]) {
                ans += val[index];
                capacity -= wt[index];
            } else {
                ans += val[index] * ((double)capacity / wt[index]);
                break;
            }
        }
        return ans;
    }
};