class Solution {
public:
    void solve(int index, int target, vector<int>& current, vector<vector<int>>& result, vector<int>& candidates) {
        int n = candidates.size();
        if (target == 0) {
            result.push_back(current);
            return;
        }
        
        
        if (index >= n || target < 0) {
            return;
        }
        
        
        if (candidates[index] <= target) {
            current.push_back(candidates[index]);
            solve(index + 1, target - candidates[index], current, result, candidates);
            current.pop_back(); 
        }
    
        while (index + 1 < n && candidates[index] == candidates[index + 1]) {
            ++index;
        }
        
      
        solve(index + 1, target, current, result, candidates);
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> current;
        
        sort(candidates.begin(), candidates.end());
        
        solve(0, target, current, result, candidates);
        return result;
    }
};
