#include <iostream>
#include <climits>
using namespace std;

class MinHeap {
    int* heap;       // Pointer to the heap array
    int capacity;    // Maximum capacity of the heap
    int heap_size;   // Current number of elements in the heap

    int left(int i) { return 2 * i + 1; }
    int right(int i) { return 2 * i + 2; }
    int parent(int i) { return (i - 1) / 2; }

    void heapify(int i) {
        int smallest = i;
        int l = left(i);
        int r = right(i);

        if (l < heap_size && heap[l] < heap[smallest])
            smallest = l;
        if (r < heap_size && heap[r] < heap[smallest])
            smallest = r;
        if (smallest != i) {
            swap(heap[i], heap[smallest]);
            heapify(smallest);
        }
    }

public:
    MinHeap(int cap) {
        capacity = cap;
        heap_size = 0;
        heap = new int[capacity];
    }

    ~MinHeap() {
        delete[] heap;
    }

    void insert(int key) {
        if (heap_size == capacity) {
            cout << "Overflow: could not insert key\n";
            return;
        }
        
        // Insert the new key at the end
        int i = heap_size++;
        heap[i] = key;

        // Move up to restore the min-heap property
        while (i != 0 && heap[parent(i)] > heap[i]) {
            swap(heap[i], heap[parent(i)]);
            i = parent(i);
        }
    }

    int getMin() {
        if (heap_size > 0)
            return heap[0];
        return INT_MAX;
    }

    int extractMin() {
        if (heap_size <= 0)
            return INT_MAX;
        if (heap_size == 1) {
            heap_size--;
            return heap[0];
        }

        // Store the minimum value, and replace it with the last element
        int root = heap[0];
        heap[0] = heap[--heap_size];
        heapify(0);

        return root;
    }

    void decreaseKey(int i, int new_val) {
        heap[i] = new_val;
        while (i != 0 && heap[parent(i)] > heap[i]) {
            swap(heap[i], heap[parent(i)]);
            i = parent(i);
        }
    }

    void deleteKey(int i) {
        decreaseKey(i, INT_MIN);
        extractMin();
    }

    void buildHeap(int arr[], int n) {
        if (n > capacity) {
            cout << "Array size exceeds heap capacity\n";
            return;
        }

        // Copy elements into the heap and adjust heap size
        for (int i = 0; i < n; i++) {
            heap[i] = arr[i];
        }
        heap_size = n;

        // Heapify from the last non-leaf node up to the root
        int startIdx = (heap_size / 2) - 1;
        for (int i = startIdx; i >= 0; i--) {
            heapify(i);
        }
    }

    void printHeap() {
        for (int i = 0; i < heap_size; i++) {
            cout << heap[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    int capacity = 10;
    MinHeap h(capacity);

    h.insert(3);
    h.insert(2);
    h.deleteKey(1);
    h.insert(15);
    h.insert(5);
    h.insert(4);
    h.insert(45);

    cout << "Heap elements: ";
    h.printHeap();

    cout << "Minimum element: " << h.getMin() << endl;
    cout << "Extracted minimum: " << h.extractMin() << endl;
    cout << "Heap elements after extraction: ";
    h.printHeap();

    h.decreaseKey(2, 1);
    cout << "Heap elements after decrease key: ";
    h.printHeap();

    int arr[] = {10, 20, 15, 30, 40};
    int n = sizeof(arr) / sizeof(arr[0]);
    h.buildHeap(arr, n);
    cout << "Heap elements after buildHeap: ";
    h.printHeap();

    return 0;
}
