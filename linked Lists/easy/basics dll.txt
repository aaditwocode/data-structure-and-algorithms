#include <iostream>
#include <vector>

using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    // Default constructor
    Node() {
        data = 0;
        next = nullptr;
        prev = nullptr;
    }

    // Parameterized Constructor
    Node(int data) {
        this->data = data;
        this->next = nullptr;
        this->prev = nullptr;
    }
};

class Solution {
public:
    // Function to construct the doubly linked list from the array
    Node* constructDLL(vector<int>& arr) {
       if (arr.empty()) {
            return nullptr;
        }

        Node* head = new Node(arr[0]);
        Node* prev = head;

        for (int i = 1; i < arr.size(); ++i)
         {
            Node* temp = new Node(arr[i],nullptr,prev);
            prev->next=temp;
            prev=temp;
        }

        return head;
    }

    // Function to traverse the doubly linked list and print its elements
    void traverseDLL(Node* head) {
        Node* current = head;
        while (current != nullptr) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }

    // Function to calculate the length of the doubly linked list
    int lengthDLL(Node* head) {
        int length = 0;
        Node* current = head;
        while (current != nullptr) {
            length++;
            current = current->next;
        }
        return length;
    }

    // Function to search for a value in the doubly linked list
    bool searchDLL(Node* head, int value) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        }
        return false;
    }
};

int main() {
    int n;
    cin >> n; // Read the size of the array

    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i]; // Read each element of the array
    }

    Solution solution;
    Node* head = solution.constructDLL(arr);

    // Traverse and print the doubly linked list
    cout << "Doubly Linked List: ";
    solution.traverseDLL(head);

    // Calculate and print the length of the doubly linked list
    int length = solution.lengthDLL(head);
    cout << "Length of Doubly Linked List: " << length << endl;

    // Search for a value in the doubly linked list
    int value;
    cout << "Enter value to search: ";
    cin >> value;
    bool found = solution.searchDLL(head, value);
    if (found) {
        cout << value << " is found in the doubly linked list." << endl;
    } else {
        cout << value << " is not found in the doubly linked list." << endl;
    }

    return 0;
}
