INORDER AND PREORDER
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.empty() || inorder.empty()) 
            return nullptr;

        unordered_map<int, int> inorderIndexMap;
        for (int i = 0; i < inorder.size(); ++i) {
            inorderIndexMap[inorder[i]] = i;
        }

        return buildTreeHelper(preorder, 0, preorder.size() - 1, 
                                inorder, 0, inorder.size() - 1, 
                                inorderIndexMap);
    }

private:
    TreeNode* buildTreeHelper(vector<int>& preorder, int preStart, int preEnd, 
                              vector<int>& inorder, int inStart, int inEnd, 
                              unordered_map<int, int>& inorderIndexMap) {
        if (preStart > preEnd || inStart > inEnd) 
            return nullptr;

        TreeNode* root = new TreeNode(preorder[preStart]);
        int inRootIndex = inorderIndexMap[root->val];
        int leftTreeSize = inRootIndex - inStart;

        root->left = buildTreeHelper(preorder, preStart + 1, preStart + leftTreeSize, 
                                      inorder, inStart, inRootIndex - 1, 
                                      inorderIndexMap);
        root->right = buildTreeHelper(preorder, preStart + leftTreeSize + 1, preEnd, 
                                       inorder, inRootIndex + 1, inEnd, 
                                       inorderIndexMap);

        return root;
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
POSTORDER AND PREORDER
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int, int> postIndexMap;
        for (int i = 0; i < postorder.size(); ++i)
            postIndexMap[postorder[i]] = i;
        return buildTreeHelper(preorder, 0, preorder.size() - 1, postIndexMap, 0);
    }

private:
    TreeNode* buildTreeHelper(vector<int>& preorder, int preStart, int preEnd, 
                              unordered_map<int, int>& postIndexMap, int postStart) {
        if (preStart > preEnd) return nullptr;
        TreeNode* root = new TreeNode(preorder[preStart]);
        if (preStart == preEnd) return root;

        int leftRootVal = preorder[preStart + 1];
        int leftRootIndex = postIndexMap[leftRootVal];
        int leftTreeSize = leftRootIndex - postStart + 1;

        root->left = buildTreeHelper(preorder, preStart + 1, preStart + leftTreeSize, postIndexMap, postStart);
        root->right = buildTreeHelper(preorder, preStart + leftTreeSize + 1, preEnd, postIndexMap, leftRootIndex + 1);
        return root;
    }
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
POSTORDER AND INORDER
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> inorderIndexMap;
        for (int i = 0; i < inorder.size(); ++i)
            inorderIndexMap[inorder[i]] = i;
        return buildTreeHelper(postorder, 0, postorder.size() - 1, 
                                inorderIndexMap, 0, inorder.size() - 1);
    }

private:
    TreeNode* buildTreeHelper(vector<int>& postorder, int postStart, int postEnd, 
                              unordered_map<int, int>& inorderIndexMap, 
                              int inStart, int inEnd) {
        if (postStart > postEnd || inStart > inEnd) return nullptr;

        TreeNode* root = new TreeNode(postorder[postEnd]);
        int inRootIndex = inorderIndexMap[root->val];
        int leftTreeSize = inRootIndex - inStart;

        root->left = buildTreeHelper(postorder, postStart, postStart + leftTreeSize - 1, 
                                      inorderIndexMap, inStart, inRootIndex - 1);
        root->right = buildTreeHelper(postorder, postStart + leftTreeSize, postEnd - 1, 
                                       inorderIndexMap, inRootIndex + 1, inEnd);
        return root;
    }
};