/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {

        map<int, map<int, multiset<int>>> nodes;
        
       
        queue<pair<TreeNode*, pair<int, int>>> q;
        q.push({root, {0, 0}}); 
        
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            
            TreeNode* node = p.first;
            int col = p.second.first;
            int level = p.second.second;
           
            nodes[col][level].insert(node->val);
            
        
            if (node->left) {
                q.push({node->left, {col - 1, level + 1}});
            }
            if (node->right) {
                q.push({node->right, {col + 1, level + 1}});
            }
        }
        
        vector<vector<int>> result;
        
        for (auto& col_map : nodes) {
            vector<int> col_nodes;
            for (auto& level_map : col_map.second) {
                col_nodes.insert(col_nodes.end(), level_map.second.begin(), level_map.second.end());
            }
            result.push_back(col_nodes);
        }
        
        return result;
    }
};