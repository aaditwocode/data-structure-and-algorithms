class Solution {
public:
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<TreeNode*, TreeNode*> parent_track; 
        unordered_map<TreeNode*, bool> visited;
        queue<TreeNode*> queue;
        TreeNode* start_node = nullptr;

        queue.push(root);
        while (!queue.empty()) {
            TreeNode* current = queue.front(); 
            queue.pop();

            if (current->val == start) {
                start_node = current;
            }

            if (current->left) {
                parent_track[current->left] = current;
                queue.push(current->left);
            }
            if (current->right) {
                parent_track[current->right] = current;
                queue.push(current->right);
            }
        }

        queue.push(start_node);
        visited[start_node] = true;
        int time = 0;

        while (!queue.empty()) { 
            int size = queue.size();
            bool infectionSpread = false;

            for (int i = 0; i < size; i++) {
                TreeNode* current = queue.front(); 
                queue.pop();

                if (current->left && !visited[current->left]) {
                    queue.push(current->left);
                    visited[current->left] = true;
                    infectionSpread = true;
                }

                if (current->right && !visited[current->right]) {
                    queue.push(current->right);
                    visited[current->right] = true;
                    infectionSpread = true;
                }

                if (parent_track.find(current) != parent_track.end() && !visited[parent_track[current]]) {
                    queue.push(parent_track[current]);
                    visited[parent_track[current]] = true;
                    infectionSpread = true;
                }
            }

            if (infectionSpread) {
                time++;
            }
        }

        return time;
    }
};