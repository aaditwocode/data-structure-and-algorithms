(BIPARTITE MATCHING PROBLEM TYPE SPECIALLY USED IF CONSTRAINTS ARE LESS)

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int n, m;
int dp[51][1 << 15]; 
int happy[50][15];     

int solve(int i, int mask) {
    if (i == m) return 0;  
    if (dp[i][mask] != -1) return dp[i][mask];  

    int max_happy = 0;
    for (int rank = 0; rank < n; rank++) {
        if (!(mask & (1 << rank))) {  
            int new_mask = mask | (1 << rank);
            int curr_happy = happy[student][rank] + solve(i+ 1, new_mask);
            max_happy = max(max_happy, curr_happy);
        }
    }

    dp[i][mask] = max_happy;
    return max_happy;
}

int main() {
    cin >> n >> m;

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> happy[i][j];
        }
    }

    memset(dp, -1, sizeof(dp));
    cout << solve(0, 0) << endl;  

    return 0;
}