#include <bits/stdc++.h>
using namespace std;

vector<int> arr, dp, lnds, inserted;

int rec(int idx) {
    if (idx == 0) return 1;

    if (dp[idx] != -1) return dp[idx];

    int max_length = 1;
    for (int j = 0; j < idx; j++) {
        if (arr[j] <= arr[idx]) { // allow equal for non-decreasing
            max_length = max(max_length, 1 + rec(j));
        }
    }
    return dp[idx] = max_length;
}

int main() {
    int n;
    cin >> n;
    arr.resize(n);
    dp.resize(n, -1);

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int lnds_length = 0;
    for (int i = 0; i < n; i++) {
        auto it = upper_bound(lnds.begin(), lnds.end(), arr[i]);
        if (it == lnds.end()) {
            lnds.push_back(arr[i]);
        } else {
            *it = arr[i];
        }
        inserted.push_back(it - lnds.begin() + 1);
    }

    cout << "Longest Non-Decreasing Subsequence: ";
    for (auto num : lnds) {
        cout << num << " ";
    }
    cout << endl;

    cout << "Positions: ";
    for (auto pos : inserted) {
        cout << pos << " ";
    }
    cout << endl;

    for (int i = 0; i < n; i++) {
        lnds_length = max(lnds_length, rec(i));
    }

    cout << "Length of LNDS: " << lnds_length << endl;

    return 0;
}
