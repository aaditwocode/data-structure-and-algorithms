#include <iostream>
#include <vector>
using namespace std;

vector<vector<int>> dp;

int knapsack(int idx, int remainingWeight, vector<int>& weights, vector<int>& values, int n) {
    if (idx == n) return 0;

    if (dp[idx][remainingWeight] != -1) return dp[idx][remainingWeight];

    int notTake = knapsack(idx + 1, remainingWeight, weights, values, n);

    int take = 0;
    if (weights[idx] <= remainingWeight) {
        take = values[idx] + knapsack(idx + 1, remainingWeight - weights[idx], weights, values, n);
    }

    return dp[idx][remainingWeight] = max(take, notTake);
}

void solve() {
    int T;
    cin >> T;

    while (T--) {
        int n, W;
        cin >> n >> W;

        vector<int> weights(n), values(n);
        for (int i = 0; i < n; ++i) {
            cin >> weights[i] >> values[i];
        }

        dp.assign(n + 1, vector<int>(W + 1, -1));

        int maxValue = knapsack(0, W, weights, values, n);
        cout << maxValue << endl;
    }
}

int main() {
    solve();
    return 0;
}
