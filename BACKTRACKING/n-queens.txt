class Solution {
private:
    bool isValid(vector<string>& board, int row, int col) {
        int n = board.size();

        // Check the column above
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
        }

        // Check the left diagonal
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }

        // Check the right diagonal
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }

        return true;
    }

   
    void solve(int row, vector<string>& board, vector<vector<string>>& result) {
        int n = board.size();
        if (row == n) {
            result.push_back(board);
            return;
        }

        for (int col = 0; col < n; col++) {
            if (isValid(board, row, col)) {
                board[row][col] = 'Q';       
                solve(row + 1, board, result); 
                board[row][col] = '.';       
            }
        }
    }

public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string> board(n, string(n, '.')); 
        solve(0, board, result);               
        return result;
    }
};










OPTIMIZED WAY

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string> board(n, string(n, '.'));
        unordered_set<int> columns, mainDiagonals, antiDiagonals;
        solve(0, n, board, result, columns, mainDiagonals, antiDiagonals);
        return result;
    }

private:
    void solve(int row, int n, vector<string>& board, vector<vector<string>>& result,unordered_set<int>& columns, unordered_set<int>& mainDiagonals, unordered_set<int>& antiDiagonals) {
        if (row == n) {
            result.push_back(board);
            return;
        }
        for (int col = 0; col < n; col++) {
            int mainDiagonal = row - col;
            int antiDiagonal = row + col;

            if (columns.count(col) || mainDiagonals.count(mainDiagonal) || antiDiagonals.count(antiDiagonal))
            {
                      continue;
            } 

            board[row][col] = 'Q';
            columns.insert(col);
            mainDiagonals.insert(mainDiagonal);
            antiDiagonals.insert(antiDiagonal);

            solve(row + 1, n, board, result, columns, mainDiagonals, antiDiagonals);
            
            board[row][col] = '.';
            columns.erase(col);
            mainDiagonals.erase(mainDiagonal);
            antiDiagonals.erase(antiDiagonal);
        }
    }
};
