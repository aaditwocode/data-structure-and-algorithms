class Solution {
private:
    bool isvalid(int node, vector<int>& color, vector<vector<int>>& adj, int col) {
        for (int neighbor : adj[node]) {
            if (color[neighbor] == col) {
                return false;
            }
        }
        return true;
    }

    bool solve(int node, int v, vector<vector<int>>& adj, vector<int>& color, int m) {
        if (node == v) return true;

        for (int col = 1; col <= m; col++) {
            if (isvalid(node, color, adj, col)) {
                color[node] = col;
                if (solve(node + 1, v, adj, color, m)) return true;
                color[node] = 0;
            }
        }
        return false;
    }

public:
    bool graphColoring(int v, vector<pair<int, int>>& edges, int m) {
        vector<vector<int>> adj(v);
        for (auto& edge : edges) {
            adj[edge.first].push_back(edge.second);
            adj[edge.second].push_back(edge.first);
        }
        vector<int> color(v, 0);
        return solve(0, v, adj, color, m);
    }
};