REC+MEMOMIZATION


class Solution {
private:
    int solve(int i, int j, int m, int n, vector<vector<int>> &dp) {
        if (i >= m || j >= n) return 0;
        if (i == m - 1 && j == n - 1) return 1;
        if (dp[i][j] != -1) return dp[i][j];
        dp[i][j] = solve(i + 1, j, m, n, dp) + solve(i, j + 1, m, n, dp);
        return dp[i][j];
    }

public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(0, 0, m, n, dp);
    }
};


BOTTOM UP
/Approach-2 (using Bottom Up)
//T.C : O(m*n)
//S.C : O(m*n)

class Solution {
    public int uniquePaths(int m, int n) {
        // Create a 2D array for storing the number of ways to reach each cell
        int[][] t = new int[m][n];

        // Initialize the first row
        for (int col = 0; col < n; col++) {
            t[0][col] = 1; // Only one way to reach any cell in the first row
        }

        // Initialize the first column
        for (int row = 0; row < m; row++) {
            t[row][0] = 1; // Only one way to reach any cell in the first column
        }

        // Fill the rest of the table using the relation:
        // t[i][j] = t[i-1][j] + t[i][j-1]
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                t[i][j] = t[i - 1][j] + t[i][j - 1];
            }
        }

        // The bottom-right cell contains the total number of unique paths
        return t[m - 1][n - 1];
    }
}