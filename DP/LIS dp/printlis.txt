vector<int> printingLongestIncreasingSubsequence(vector<int>& arr, int n) {
    if (n == 0) return {};

    vector<int> dp(n, 1), prev(n, -1);
    int maxLen = 1, lastIdx = 0;

    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                prev[i] = j;
            }
        }
        if (dp[i] > maxLen) {
            maxLen = dp[i];
            lastIdx = i;
        }
    }

    vector<int> lis;
    while (lastIdx != -1) {
        lis.push_back(arr[lastIdx]);
        lastIdx = prev[lastIdx];
    }
    reverse(lis.begin(), lis.end());
    return lis;
}
