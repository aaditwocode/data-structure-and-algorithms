MEMOIZATION+REC
class Solution {
private:
    bool isSubsequence(string s, string t) {
        int size = s.size();
        int size1 = t.size();
        int i = 0, j = 0;
        while (i < size && j < size1) {
            if (s[i] == t[j]) {
                i++;
            }
            j++;
        }
        return i == size;
    }

    bool checkPredecessor(string& a, string& b) {
        int size = a.size();
        int size1 = b.size();
        return (size1 - size == 1) && isSubsequence(a, b);
    }

    int f(int idx, int previdx, vector<string>& words, vector<vector<int>>& dp) {
        if (idx >= words.size()) return 0;

        if (dp[idx][previdx + 1] != -1) return dp[idx][previdx + 1];

        int skip = f(idx + 1, previdx, words, dp);

        int take = 0;
        if (previdx == -1 || checkPredecessor(words[previdx], words[idx])) {
            take = 1 + f(idx + 1, idx, words, dp);
        }

        return dp[idx][previdx + 1] = max(skip, take);
    }

public:
    int longestStrChain(vector<string>& words) {
        auto myFunction = [](const string& a, const string& b) {
            return a.size() < b.size();
        };

        sort(words.begin(), words.end(), myFunction);

        int n = words.size();
        vector<vector<int>> dp(n, vector<int>(n + 1, -1));
        return f(0, -1, words, dp);
    }
};


BOTTOM UP
class Solution {
public:
    bool predecessor(string& prev, string& curr) {
        int m = prev.length();
        int n = curr.length();
        
        if(m >= n || n-m != 1)
            return false;
        
        int i = 0, j = 0;
        while(i < m && j < n) {
            if(prev[i] == curr[j]) {
                i++;
            }
            j++;
        }
        return i==m;
    }
    
    static bool myFunction(string& s1, string& s2) {
        return s1.length() < s2.length();
    }
    
    int longestStrChain(vector<string>& words) {
        int n = words.size();
        sort(begin(words), end(words), myFunction); 
        
        vector<int> t(n, 1);
        int maxL = 1;
        
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<i; j++) {
                
                if(predecessor(words[j], words[i])) {
                    t[i] = max(t[i], t[j]+1);
                    maxL = max(maxL, t[i]);
                }
            }
        }
        
        return maxL;
        
    }
};

