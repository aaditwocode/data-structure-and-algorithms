#include <bits/stdc++.h>
using namespace std;

class Solution {
private:
    vector<int> dpStart, dpEnd;

    int lisFromStart(int idx, vector<int>& nums) {
        if (dpStart[idx] != -1) return dpStart[idx];
        int ans = 1;
        for (int prev = 0; prev < idx; ++prev) {
            if (nums[prev] < nums[idx])
                ans = max(ans, 1 + lisFromStart(prev, nums));
        }
        return dpStart[idx] = ans;
    }

    int lisFromEnd(int idx, vector<int>& nums) {
        if (dpEnd[idx] != -1) return dpEnd[idx];
        int ans = 1;
        for (int next = nums.size() - 1; next > idx; --next) {
            if (nums[next] < nums[idx])
                ans = max(ans, 1 + lisFromEnd(next, nums));
        }
        return dpEnd[idx] = ans;
    }

public:
    int LongestBitonicSequence(int n, vector<int>& nums) {
        dpStart.resize(n, -1);
        dpEnd.resize(n, -1);
        
        int maxLen = 0;
        for (int i = 0; i < n; ++i) {
            int inc = lisFromStart(i, nums);
            int dec = lisFromEnd(i, nums);
            maxLen = max(maxLen, inc + dec - 1);
        }
        return maxLen;
    }
};
