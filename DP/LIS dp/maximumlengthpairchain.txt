RECURSION+MEMOMIZATION

class Solution {
private:
    int f(int idx, int previdx, vector<vector<int>>& pairs, vector<vector<int>>& dp) {
        if (idx >= pairs.size()) return 0;

        if (dp[idx][previdx + 1] != -1) return dp[idx][previdx + 1];

        int skip = f(idx + 1, previdx, pairs, dp);

        int take = 0;
        if (previdx == -1 || pairs[idx][0] > pairs[previdx][1]) {
            take = 1 + f(idx + 1, idx, pairs, dp);
        }

        return dp[idx][previdx + 1] = max(skip, take);
    }

public:
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        vector<vector<int>> dp(n, vector<int>(n + 1, -1));
        sort(pairs.begin(),pairs.end());
        return f(0, -1, pairs, dp);
    }
};

BOTTOM UP
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> t(n, 1);
        sort(pairs.begin(),pairs.end());
        int maxL = 1;
        for(int i = 0; i<n; i++) {
            for(int j = 0; j<i; j++) {
                if(nums[j][1] < nums[i][0]) {
                    t[i] = max(t[i], t[j]+1);
                    maxL = max(maxL, t[i]);
                }
            }
        }
        
        return maxL;
    }
};

