class Solution {
private:
    int f(int ind, int buy, int remainingTransactions, int n, vector<int>& prices, vector<vector<vector<int>>>& dp) {
        if (ind == n || remainingTransactions == 0) return 0;
        if (dp[ind][buy][remainingTransactions] != -1) return dp[ind][buy][remainingTransactions];

        int profit = 0;
        if (buy) {
            profit = max(-prices[ind] + f(ind + 1, 0, remainingTransactions, n, prices, dp), 
                         0 + f(ind + 1, 1, remainingTransactions, n, prices, dp));
        } else {
            profit = max(prices[ind] + f(ind + 1, 1, remainingTransactions - 1, n, prices, dp), 
                         0 + f(ind + 1, 0, remainingTransactions, n, prices, dp));
        }

        return dp[ind][buy][remainingTransactions] = profit;
    }

public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k + 1, -1)));
        return f(0, 1, k, n, prices, dp);
    }
};