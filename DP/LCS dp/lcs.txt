REC+MEMOMIZATION

class Solution {
private:
    int solve(const string &t1, const string &t2, int i, int j, vector<vector<int>> &dp) {
        if (i == t1.size() || j == t2.size()) {
            return 0;
        }
        
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        if (t1[i] == t2[j]) {
            dp[i][j] = 1 + solve(t1, t2, i + 1, j + 1, dp);
        } else {
            dp[i][j] = max(solve(t1, t2, i + 1, j, dp), solve(t1, t2, i, j + 1, dp));
        }

        return dp[i][j];
    }
    
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));
        return solve(text1, text2, 0, 0, dp);
    }

};


//Approach-2 (Bottom Up)
//T.C : O(m*n)
//S.C : O(m*n)
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length();
        int n = text2.length();
        
        vector<vector<int>> t(m+1, vector<int>(n+1));
        
        for(int i = 0; i<m+1; i++) {
            for(int j = 0; j<n+1; j++) {
                if(i == 0 || j == 0)
                    t[i][j] = 0;
                else if(text1[i-1] == text2[j-1])
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = max(t[i][j-1], t[i-1][j]);
            }
        }
        
        return t[m][n];
    }
};