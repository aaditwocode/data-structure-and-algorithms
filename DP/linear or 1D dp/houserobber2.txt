MEMOIAZTION+REC
class Solution {
private:
    int f(int idx, int n, vector<int>& nums, vector<int>& dp) {
        if (idx > n) return 0;
        if (dp[idx] != -1) return dp[idx];
        dp[idx] = max(nums[idx] + f(idx + 2, n, nums, dp), f(idx + 1, n, nums, dp));
        return dp[idx];
    }

public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> dp(n, -1);

        int case1 = f(0, n - 2, nums, dp);

        fill(dp.begin(), dp.end(), -1);

        int case2 = f(1, n - 1, nums, dp);
        
        return max(case1, case2);
    }
};


BOTTOM UP
class Solution {
public:
    int n;
    
    int rob(vector<int>& nums) {
        n = nums.size();
        if(n == 1)
            return nums[0];
        
        vector<int> t(n+1, 0);
        //t[i] = Max money gained from i houses
        
        int result1 = 0;
        int result2 = 0;
        
        //Case-1 (Take from 1st House - Hence skip the last house)
        t[0] = 0;
        for(int i = 1; i<=n-1; i++) {
            t[i] = max(t[i-1] , nums[i-1]+ ((i-2 >= 0) ? t[i-2] : 0 ));
        }
        result1 = t[n-1];
        
        t.clear();
        //Case-2 (Take from 2nd House - Hence take the last house)
        t[0] = 0;
        t[1] = 0;
        for(int i = 2; i<=n; i++) {
            t[i] = max(t[i-1] , nums[i-1]+ ((i-2 >= 0) ? t[i-2] : 0 ));
        }
        result2 = t[n];
        
        return max(result1, result2);
        
    }
};