MEMOIZATION+REC
class Solution {
private:
    int f(int idx, vector<int>& cost, vector<int>& dp) {
        if (idx >= cost.size()) return 0;
        if (dp[idx] != -1) return dp[idx];
        dp[idx] = cost[idx] + min(f(idx + 1, cost, dp), f(idx + 2, cost, dp));
        return dp[idx];
    }

public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size(), -1);
        return min(f(0, cost, dp), f(1, cost, dp));
    }
};

BOTTOM UP

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        if (n == 2) return min(cost[0], cost[1]);
        
        for (int i = 2; i < n; i++) {
            cost[i] += min(cost[i - 1], cost[i - 2]);
        }
        return min(cost[n - 1], cost[n - 2]);
    }
};
