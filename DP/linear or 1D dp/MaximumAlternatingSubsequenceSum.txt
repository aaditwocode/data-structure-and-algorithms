MEMOMIZATION+REC

class Solution {
private:
    long long f(int idx, vector<int>& nums, vector<vector<long long>>& dp, bool flag) {
        if (idx == nums.size()) return 0;
        if (dp[idx][flag] != -1) return dp[idx][flag];

        long long val = (flag ? nums[idx] : -nums[idx]);
        long long skip = f(idx + 1, nums, dp, flag);
        long long take = val + f(idx + 1, nums, dp, !flag);

        return dp[idx][flag] = max(skip, take);
    }

public:
    long long maxAlternatingSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<long long>> dp(n, vector<long long>(2, -1));
        return f(0, nums, dp, true);
    }
};


BOTTOM UP
class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        int n = nums.size();
        
        vector<vector<long>> t(n, vector<long>(2, 0));

        t[0][0] = max(-nums[0], 0);
        t[0][1] = max(nums[0], 0);
            
        for(int i = 1; i < n; i++) {
            
            t[i][0] = max(t[i-1][1] - nums[i], t[i-1][0]);
            
            t[i][1] = max(t[i-1][0] + nums[i], t[i-1][1]);
            
            
        }
        
        return max(t[n-1][0], t[n-1][1]);
    }
};