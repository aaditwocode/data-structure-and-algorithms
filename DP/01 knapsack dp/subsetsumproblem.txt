REC+MEMOIZATION
class Solution {
public:
    bool isSubsetSumHelper(vector<int>& arr, int n, int target, vector<vector<int>>& memo) {
  
        if (target == 0) return true; 
        if (n == 0) return false;    

        if (memo[n][target] != -1) return memo[n][target];

        if (arr[n - 1] <= target) {
            memo[n][target] = isSubsetSumHelper(arr, n - 1, target - arr[n - 1], memo) || 
                              isSubsetSumHelper(arr, n - 1, target, memo);
        } else {
          
            memo[n][target] = isSubsetSumHelper(arr, n - 1, target, memo);
        }

        return memo[n][target];
    }

    bool isSubsetSum(vector<int>& arr, int target) {
        int n = arr.size();
        vector<vector<int>> memo(n + 1, vector<int>(target + 1, -1));

        return isSubsetSumHelper(arr, n, target, memo);
    }
};


BOTTOM UP OR TABULATION 

class Solution {
public:
    bool isSubsetSum(vector<int>& arr, int target) {
        int n = arr.size();
        
        vector<vector<bool>> t(n + 1, vector<bool>(target + 1, false));
        
      
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= target; ++j) {
                if (j == 0) {
                    t[i][j] = true; 
                } else if (i == 0) {
                    t[i][j] = false; 
                } else {
                    
                    if (arr[i - 1] <= j) {
                        t[i][j] = t[i - 1][j - arr[i - 1]] || t[i - 1][j];
                    } else {
                    
                        t[i][j] = t[i - 1][j];
                    }
                }
            }
        }
    
        return t[n][target];
    }
};