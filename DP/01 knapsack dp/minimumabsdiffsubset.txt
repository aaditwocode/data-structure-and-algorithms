TABULATION+BOTTOM UP
class Solution {
public:
    bool isSubsetSum(vector<int>& arr, int target, vector<bool>& lastRow) {
        int n = arr.size();
        vector<vector<bool>> t(n + 1, vector<bool>(target + 1, false));
        
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= target; ++j) {
                if (j == 0) {
                    t[i][j] = true;
                } else if (i == 0) {
                    t[i][j] = false;
                } else {
                    if (arr[i - 1] <= j) {
                        t[i][j] = t[i - 1][j - arr[i - 1]] || t[i - 1][j];
                    } else {
                        t[i][j] = t[i - 1][j];
                    }
                }
            }
        }
        
        // Copy the last row of the DP table
        lastRow = t[n];
        return t[n][target];
    }
    
    int minimumDifference(vector<int>& nums) {
        int sum = 0;
        for (int num : nums) {
            sum += abs(num); // Handle negative numbers by taking their absolute value
        }
        
        vector<bool> lastRow(sum + 1, false);
        isSubsetSum(nums, sum, lastRow);
        
        // Compute the minimum difference
        int mn = INT_MAX;
        for (int i = 0; i <= sum / 2; ++i) {
            if (lastRow[i]) {
                mn = min(mn, sum - 2 * i);
            }
        }
        
        return mn;
    }
};
