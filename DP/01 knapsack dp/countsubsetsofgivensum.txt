BOTTOM UP

class Solution {
public:
    int countPartitions(vector<int>& arr, int d) {
        int sum = 0;
        for (int num : arr) sum += num;
        int s1 = (d + sum) / 2;
        if ((d + sum) % 2 != 0 || s1 < 0) return 0;
        return countSubsetSum(arr, s1);
    }

private:
    int countSubsetSum(vector<int>& arr, int s1) {
        int n = arr.size();
        int mod = 1e9 + 7;
        vector<vector<int>> t(n + 1, vector<int>(s1 + 1, 0));
        for (int i = 0; i <= n; ++i) t[i][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= s1; ++j) {
                if (arr[i - 1] <= j) {
                    t[i][j] = (t[i - 1][j - arr[i - 1]] + t[i - 1][j]) % mod;
                } else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][s1];
    }
};