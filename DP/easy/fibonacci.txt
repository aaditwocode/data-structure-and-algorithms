class Solution {
  public:
    const int MOD = 1e9 + 7;


   MEMOIZATION WAY


    long long int topDown(int n) {
        vector<long long int> dp(n + 1, -1);
        return fibonacciTopDown(n, dp);
    }

    long long int fibonacciTopDown(int n, vector<long long int>& dp) {
        if (n <= 1) {
            return n;
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        dp[n] = (fibonacciTopDown(n - 1, dp) + fibonacciTopDown(n - 2, dp)) % MOD;
        return dp[n];
    }



TABULATION + OPTIMIZED WAY

    long long int bottomUp(int n) {
        if (n <= 1) {
            return n;
        }
        long long int prev1 = 1;
        long long int prev2 = 0;
        long long int current;
        for (int i = 2; i <= n; i++) {
            current = (prev1 + prev2) % MOD;
            prev2 = prev1;
            prev1 = current;
        }
        return current;
    }
};
