REC+MEMOIZATION
class Solution {
private:
    bool check(int i, int j, string& s, vector<vector<int>>& dp) {
        if (i > j) return true;
        if (dp[i][j] != -1) return dp[i][j];
        if (s[i] == s[j]) {
            dp[i][j] = check(i + 1, j - 1, s, dp);
        } else {
            dp[i][j] = false;
        }
        return dp[i][j];
    }

    string f(string& s, vector<vector<int>>& dp) {
        string ans = "";
        int n = s.size();
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (check(i, j, s, dp)) {
                    string current = s.substr(i, j - i + 1);
                    if (current.size() > ans.size()) {
                        ans = current;
                    }
                }
            }
        }
        return ans;
    }

public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return f(s, dp);
    }
};



BLUEPRINT+BOTTOM UP APPROACH
 //t[i][j] = true : s[i:j] is a substring where i and j are inclusive indices

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        
        int maxL  = 0;
        int index = 0;
        
        vector<vector<bool>> t(n, vector<bool>(n));
        //t[i][j] = lps in s[i...j]
        
        maxL = 1; //every letter is a substring and pallindrome as well
        for(int i = 0; i<n; i++) {
            t[i][i] = true;
        }
        
        for(int L = 2; L<=n; L++) {
            for(int i = 0; i<n-L+1; i++) {
                int j = i + L - 1;
                
                if(s[i] == s[j] && L == 2) {
                    t[i][j] = true;
                    maxL = 2;
                    index = i;
                } else if (s[i] == s[j] && t[i+1][j-1] == true) {
                    t[i][j] = true;
                    if(j-i+1 > maxL) {
                        maxL = j-i+1;
                        index = i;
                    }
                } else {
                    t[i][j] = false;
                }
                
            }    
        }
        
        
        return s.substr(index, maxL);
    }
};
