//Approach (Using DP + Backtracking)
//T.C : O(2^n)
//S.C : O(n^2)

class Solution {
public:
    int minCut(string s) {
        int n = s.length();
        vector<vector<bool>> t(n, vector<bool>(n, false));
        for (int i = 0; i < n; ++i) t[i][i] = true;
        for (int L = 2; L <= n; ++L) {
            for (int i = 0; i < n - L + 1; ++i) {
                int j = i + L - 1;
                if (s[i] == s[j]) {
                    if (L == 2 || t[i + 1][j - 1]) t[i][j] = true;
                }
            }
        }
        vector<int> dp(n, INT_MAX);
        for (int i = 0; i < n; ++i) {
            if (t[0][i]) {
                dp[i] = 0;
            } else {
                for (int k = 0; k < i; ++k) {
                    if (t[k + 1][i]) dp[i] = min(dp[i], dp[k] + 1);
                }
            }
        }
        return dp[n - 1];
    }
};
