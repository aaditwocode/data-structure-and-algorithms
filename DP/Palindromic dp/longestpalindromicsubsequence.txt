REC+MEMOIZATION

class Solution {
private:
    int f(int i, int j, vector<vector<int>>& dp, string& s) {
    
        if (i > j) return 0; 
        if (i == j) return 1; 
        
        if (dp[i][j] != -1) return dp[i][j];
        

        if (s[i] == s[j]) {
             dp[i][j] = 2 + f(i + 1, j - 1, dp, s);
        } else {
   
            dp[i][j] = max(f(i + 1, j, dp, s), f(i, j - 1, dp, s));
        }
        return dp[i][j];
    }

public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, -1)); 
        return f(0, n - 1, dp, s);
    }
};

BOTTOM UP
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();

        vector<vector<int>> t(n, vector<int>(n));
        //t[i][j] = LPS in s[i...j]

        for(int i = 0; i < n; i++) {
            t[i][i] = 1; // 1 length is always a palindrome
        }

        for(int L = 2; L<=n; L++) {
            for(int i = 0; i < n-L+1; i++) {
                int j = i + L - 1;

                if(s[i] == s[j]) {
                    t[i][j] = 2 + t[i+1][j-1];
                } else {
                    t[i][j] = max(t[i][j-1], t[i+1][j]);
                }
            }
        }

        return t[0][n-1]; 

    }
};

