#include <iostream>
#include <vector>
using namespace std;

// Function to find the peak element in a bitonic array
int findPeakElement(const vector<int>& arr) {
    int n = arr.size();
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        // Check if mid is the peak element
        if (mid > 0 && mid < n - 1) {
            if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) {
                return mid;
            } else if (arr[mid] < arr[mid - 1]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        // Handle the case when mid is at the boundary
        else if (mid == 0) {
            return (arr[0] > arr[1]) ? 0 : 1;
        }
        else {
            return (arr[n - 1] > arr[n - 2]) ? n - 1 : n - 2;
        }
    }
    return -1; // should not reach here
}

// Binary search function for ascending order array
int binarySearchAscending(const vector<int>& arr, int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

// Binary search function for descending order array
int binarySearchDescending(const vector<int>& arr, int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] > key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

// Function to search for a key in the bitonic array
int searchInBitonicArray(const vector<int>& arr, int key) {
    int peak = findPeakElement(arr);
    
    // Search in the ascending part
    int index = binarySearchAscending(arr, 0, peak, key);
    if (index != -1) return index;

    // Search in the descending part
    return binarySearchDescending(arr, peak + 1, arr.size() - 1, key);
}

int main() {
    vector<int> arr = {1, 3, 8, 12, 4, 2};
    int key = 4;
    int index = searchInBitonicArray(arr, key);

    if (index != -1) {
        cout << "Element " << key << " found at index " << index << endl;
    } else {
        cout << "Element " << key << " not found in the array" << endl;
    }

    return 0;
}
