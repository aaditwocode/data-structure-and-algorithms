class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n=arr.size();
        int low = 0 , high = n-1;
        
    if (n == 1) return 0;
    if (arr[0] > arr[1]) return 0;
    if (arr[n - 1] > arr[n - 2]) return n - 1;

      while (low <= high) {
        int mid = (low + high) / 2;

      
        if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) {
            return mid;
        }

       
        else if ( arr[mid] > arr[mid - 1]) {
            low = mid + 1;
        }
        
        else {
            high = mid - 1;
        }
    }
    return -1;
    }
};

see if you are max then you are greater than left and right both elements 
to trim left half i thought if you and you are greater than 
left than then no need for left half to look check right

tc-o(logn)
ac-o(1)