class Solution {
public:
  
    int calculateHours(const vector<int>& piles, int speed , int h) {
        int totalHours = 0;
        for (int pile : piles) {
            // Calculate hours needed for current pile and accumulate
            
            totalHours += (pile + speed - 1) / speed; // Equivalent to ceil(pile / speed)

            // Exit early if totalHours already exceeds h
            if (totalHours > h) {
                return totalHours;
            }
        }
        return totalHours;
    }

    // Function to find the minimum eating speed
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;
        int high = *max_element(piles.begin(), piles.end());
        int result = high; // Initialize result with the highest possible speed

        while (low <= high) {
           
            int mid = low + (high - low) / 2;
            
            int totalHours = calculateHours(piles, mid , h);

            if (totalHours <= h) {
                result = mid; // Found a valid speed, try for a smaller one
                high = mid - 1;
            } else {
                low = mid + 1; // Increase the speed
            }
        }

        return result;
    }
};

self explanatory 