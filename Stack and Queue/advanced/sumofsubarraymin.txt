class Solution {
public:
    vector<int> nextSmallerElementRight(vector<int>& nums2) {
        stack<int> s;
        vector<int> right(nums2.size(), nums2.size());
        for (int i = nums2.size() - 1; i >= 0; --i) {
            while (!s.empty() && nums2[s.top()] >= nums2[i]) {
                s.pop();
            }
            if (!s.empty()) {
                right[i] = s.top();
            }
            s.push(i);
        }
        return right;
    }

    vector<int> nextSmallerElementLeft(vector<int>& nums2) {
        stack<int> s;
        vector<int> left(nums2.size(), -1);
        for (int i = 0; i < nums2.size(); ++i) {
            while (!s.empty() && nums2[s.top()] > nums2[i]) {
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top();
            }
            s.push(i);
        }
        return left;
    }

    int sumSubarrayMins(vector<int>& arr) {
        vector<int> right = nextSmallerElementRight(arr);
        vector<int> left = nextSmallerElementLeft(arr);
        long long result = 0;
        const int mod = 1e9 + 7;

        for (int i = 0; i < arr.size(); ++i) {
            long long left_count = i - left[i];
            long long right_count = right[i] - i;
            result = (result + arr[i] * left_count % mod * right_count % mod) % mod;
        }

        return static_cast<int>(result);
    }
};

