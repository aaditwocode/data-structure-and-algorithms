class Solution {
public:
    vector<int> nsl(vector<int>& nums2) {
        stack<pair<int, int>> s;
        vector<int> v;
        int n = nums2.size();
        int i = 0;

        while (i < n) {
            while (!s.empty() && nums2[i] <= s.top().first) {
                s.pop();
            }
            if (s.empty()) {
                v.push_back(-1);
            } else {
                v.push_back(s.top().second);
            }
            s.push({nums2[i], i});
            i++;
        }

        return v;
    }

    vector<int> nsr(vector<int>& nums2) {
        stack<pair<int, int>> s;
        vector<int> v;
        int n = nums2.size();
        int i = n - 1;

        while (i >= 0) {
            while (!s.empty() && nums2[i] <= s.top().first) {
                s.pop();
            }
            if (s.empty()) {
                v.push_back(n); 
            } else {
                v.push_back(s.top().second);
            }
            s.push({nums2[i], i});
            i--;
        }

        reverse(v.begin(), v.end());

        return v;
    }

    int MAH(vector<int>& heights) {
        int n = heights.size();
        if (n == 0) return 0;

        vector<int> left_smaller(n), right_smaller(n);
        left_smaller = nsl(heights);
        right_smaller = nsr(heights);

        vector<int> area(n, 0);
        for (int i = 0; i < n; ++i) {
            int width = right_smaller[i] - left_smaller[i] - 1;
            area[i] = width * heights[i];
        }

        int max_area = *max_element(area.begin(), area.end());

        return max_area;
    }

    int maximalRectangle(vector<vector<char>>& matrix) {
        if (matrix.empty()) return 0;
        int rows = matrix.size();
        int cols = matrix[0].size();
        vector<int> v(cols, 0);

        for (int j = 0; j < cols; ++j) {
            v[j] = matrix[0][j] - '0'; 
        }

        int mx = MAH(v);

        for (int i = 1; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (matrix[i][j] == '0') {
                    v[j] = 0;
                } else {
                    v[j] += matrix[i][j] - '0';  
                }
            }
            mx = max(mx, MAH(v));
        }

        return mx;
    }
};