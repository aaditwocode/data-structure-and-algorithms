class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums2) {
        stack<int> s;
        vector<int> v;
        int n = nums2.size();
        int i = 0;

        while (i <= n) {
            if (s.size() == 0) {
                v.push_back(-1);
            } else if (nums2[i] < s.top().first) {
                v.push_back(s.top().second);
            } else if (nums2[i] >= s.top().first) {
                while (s.size() > 0 && nums2[i] >= s.top().first) {
                    s.pop();
                }
                if (s.size() == 0) {
                    v.push_back(-1);
                } else {
                    v.push_back(s.top().second);
                }
            }
            s.push(nums2[i]);
            i--;

        }

        return v;
    }
}; 

for(i=0;i<v.size();i++){
    v[i]=i-v[i];
}

AV WAY FINE WHEN TO CALCULATE OF ALL DAYS 

LEETCODE GIVE SPECIFIC DAY THEN GIVE AND DAYS ARE ENTERED AS WE PROCEED SO SIMULTANEOUSLY
 
class StockSpanner {
public:
    stack<pair<int, int>> s;  
    int index; 

    StockSpanner() {
        index = -1;  
    }

    
    int next(int price) {
        index++;  

    
        while (!s.empty() && s.top().first <= price) {
            s.pop();
        }

        int ans = (s.empty()) ? (index - (-1)) : (index - s.top().second);

        s.push({price, index});

        return ans;
    }
};


NEETCODE WAY  (best out of all)
  int next(int price) {
        int span = 1;

        while (!stk.empty() && price >= stk.top().first) {
            span += stk.top().second;
            stk.pop();
        }

        stk.push({price, span});
        return stk.top().second;
    }


