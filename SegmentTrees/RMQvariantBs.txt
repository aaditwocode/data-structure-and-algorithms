class Solution {
public:
    void build(int i, int l, int r, vector<int>& seg, vector<int>& heights) {
        if (l == r) {
            seg[i] = l;
            return;
        }
        int mid = (l + r) / 2;
        build(2 * i + 1, l, mid, seg, heights);
        build(2 * i + 2, mid + 1, r, seg, heights);
        int left = seg[2 * i + 1];
        int right = seg[2 * i + 2];
        seg[i] = (heights[left] >= heights[right]) ? left : right;
    }

    int query(int i, int l, int r, int ql, int qr, vector<int>& seg, vector<int>& heights) {
        if (r < ql || l > qr) return -1;
        if (l >= ql && r <= qr) return seg[i];
        int mid = (l + r) / 2;
        int left = query(2 * i + 1, l, mid, ql, qr, seg, heights);
        int right = query(2 * i + 2, mid + 1, r, ql, qr, seg, heights);
        if (left == -1) return right;
        if (right == -1) return left;
        return (heights[left] >= heights[right]) ? left : right;
    }

    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n = heights.size();
        vector<int> seg(4 * n);
        build(0, 0, n - 1, seg, heights);
        vector<int> res;

        for (auto& q : queries) {
            int a = min(q[0], q[1]);
            int b = max(q[0], q[1]);

            if (a == b || heights[b] > heights[a]) {
                res.push_back(b);
                continue;
            }

            int l = b + 1, r = n - 1, ans = -1;
            while (l <= r) {
                int mid = (l + r) / 2;
                int idx = query(0, 0, n - 1, b + 1, mid, seg, heights);
                if (idx != -1 && heights[idx] > heights[a]) {
                    ans = idx;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }

            res.push_back(ans);
        }

        return res;
    }
};
