#include <iostream>
#include <vector>
using namespace std;

vector<int> arr = {1, 3, 5, 7, 9, 11};
vector<int> segtree;
int n = arr.size();


void buildTree(int i, int l, int r) {
    if (l == r) {
        segtree[i] = arr[l];
        return;
    }
    int mid = (l + r) / 2;
    buildTree(2 * i + 1, l, mid);
    buildTree(2 * i + 2, mid + 1, r);
    segtree[i] = segtree[2 * i + 1] + segtree[2 * i + 2];
}

void updateTree(int i, int l, int r, int idx, int newVal) {
    if (l == r) {
        arr[idx] = newVal;
        segtree[i] = newVal;
        return;
    }

    int mid = (l + r) / 2;
    if (idx <= mid)
        updateTree(2 * i + 1, l, mid, idx, newVal);
    else
        updateTree(2 * i + 2, mid + 1, r, idx, newVal);

    segtree[i] = segtree[2 * i + 1] + segtree[2 * i + 2];
}

// Range sum query with 3 if conditions
int rangeQuery(int i, int l, int r, int start, int end) {

    if (r < start || l > end)
        return 0;

    if (l >= start && r <= end)
        return segtree[i];

    int mid = (l + r) / 2;
    int leftSum = rangeQuery(2 * i + 1, l, mid, start, end);
    int rightSum = rangeQuery(2 * i + 2, mid + 1, r, start, end);
    return leftSum + rightSum;
}

int main() {
    segtree.resize(4 * n);
    buildTree(0, 0, n - 1);

    cout << "Initial Segment Tree:\n";
    for (int i = 0; i < 2 * n; ++i)
        cout << "segtree[" << i << "] = " << segtree[i] << endl;


    int start = 1, end = 3;
    cout << "\nRange Sum from index " << start << " to " << end << ": ";
    cout << rangeQuery(0, 0, n - 1, start, end) << endl;

  
    updateTree(0, 0, n - 1, 2, 10);

    cout << "\nAfter Update (index 2 -> 10):\n";
    for (int i = 0; i < 2 * n; ++i)
        cout << "segtree[" << i << "] = " << segtree[i] << endl;


    cout << "\nRange Sum from index " << start << " to " << end << ": ";
    cout << rangeQuery(0, 0, n - 1, start, end) << endl;

    return 0;
}
