#include <iostream>
using namespace std;

// Declare arr globally so it is accessible in all functions
int arr[100005];

int buildtree(int i, int l, int r, int segtree[], int arr[]) {
    if (l == r) {
        segtree[i] = l;
        return l;
    }
    int mid = (l + r) / 2;
    int leftmaxindex = buildtree(2 * i + 1, l, mid, segtree, arr);
    int rightmaxindex = buildtree(2 * i + 2, mid + 1, r, segtree, arr);
    if (arr[leftmaxindex] > arr[rightmaxindex]) {
        segtree[i] = leftmaxindex;
        return leftmaxindex;
    } else {
        segtree[i] = rightmaxindex;
        return rightmaxindex;
    }
}

int query(int i, int l, int r, int start, int end, int segtree[], int arr[]) {
    if (r < start || l > end) return -1;
    if (l >= start && r <= end) return segtree[i];
    int mid = (l + r) / 2;
    int leftmaxindex = query(2 * i + 1, l, mid, start, end, segtree, arr);
    int rightmaxindex = query(2 * i + 2, mid + 1, r, start, end, segtree, arr);

    if (leftmaxindex == -1) return rightmaxindex;
    if (rightmaxindex == -1) return leftmaxindex;
    if (arr[leftmaxindex] > arr[rightmaxindex]) return leftmaxindex;
    else return rightmaxindex;
}

int* constructST(int arr[], int n) {
    int* segtree = new int[4 * n];
    buildtree(0, 0, n - 1, segtree, arr);
    return segtree;
}

int RMQ(int st[], int n, int a, int b, int arr[]) {
    return query(0, 0, n - 1, a, b, st, arr);
}

// Example usage
int main() {
    int inputArr[] = {1, 3, 2, 7, 9, 11};
    int n = sizeof(inputArr) / sizeof(inputArr[0]);
    for (int i = 0; i < n; ++i) arr[i] = inputArr[i];

    int* segtree = constructST(arr, n);

    int maxIndex = RMQ(segtree, n, 1, 4, arr); // Query maximum index from 1 to 4
    cout << "Max value index in range [1,4]: " << maxIndex << endl;
    cout << "Max value in range [1,4]: " << arr[maxIndex] << endl;

    delete[] segtree;
    return 0;
}
 