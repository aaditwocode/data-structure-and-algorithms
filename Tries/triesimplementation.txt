class Node {
public:
    Node *child[26];
    bool isWord;

    Node() {
        isWord = false;
        for (auto &a : child) a = nullptr;
    }
};

class Trie {
    Node* root;

public:
    Trie() {
        root = new Node();
    }

    void insert(string s) {
        Node *p = root;
        for (auto &a : s) {
            int i = a - 'a';
            if (!p->child[i]) p->child[i] = new Node();
            p = p->child[i];
        }
        p->isWord = true;
    }

    bool search(string key, bool prefix = false) {
        Node *p = root;
        for (auto &a : key) {
            int i = a - 'a';
            if (!p->child[i]) return false;
            p = p->child[i];
        }
        if (prefix == false) return p->isWord;
        return true;
    }

    bool startsWith(string prefix) {
        return search(prefix, true);
    }
};
